	CPU	68000
	SUPMODE	ON

ENTRY	EQU	$00008000	; Entry address

	ORG	ENTRY

TEST1:
	;; ABCD
	ABCD.B	D0,D1
	ABCD.B	-(A1),-(A0)
	;; ADD
	ADD.B	3(A0),D0
	ADD.W	D0,3(A0)
	ADD.L	#$8000,D0
	;; ADDA
	ADDA.W	3(A0),A0
	ADDA.L	$8002,A0
	;; ADDI
	ADDI.B	#$33,D0
	ADDI.W	#$4444,3(A0)
	ADDI.L	#$55555555,$00008100
	;; ADDQ
	ADDQ.B	#1,D0
	ADDQ.W	#7,3(A0)
	ADDQ.L	#8,$00008100
	;; ADDX
	ADDX.B	D0,D1
	ADDX.W	-(A0),-(A1)
	ADDX.L	D0,D1
	;; AND
	AND.B	3(A0,D1.W),D0
	AND.W	D0,3(A0,D1.W)
	AND.L	#$8000,D0
	;; ANDI
	ANDI.B	#$33,D0
	ANDI.W	#$4444,3(A0,D1.W)
	ANDI.L	#$55555555,$00008100
	;; ANDI to CCR
	ANDI.B	#$88,CCR
	;; ANDI to SR
	ANDI.W	#$8888,SR
	;; ASL
	ASL.B	D1,D0
	ASL.B	#7,D0
;	ASL.B	3(A0,D1.W)	; NG(Destination==Memory)
	ASL.W	D1,D0
	ASL.W	#7,D0
	ASL.W	3(A0,D1.W)
	ASL.L	D1,D0
	ASL.L	#7,D0
;	ASL.L	3(A0,D1.W)	; NG(Destination==Memory)
	;; ASR
	ASR.B	D1,D0
	ASR.W	3(A0,D1.W)
	ASR.L	#7,D0
	;; Bcc
BCC0:	BCC.B	BCC0
	BCS.B	BCC0
	BEQ.B	BCC0
	BGE.B	BCC0
	BGT.B	BCC0
	BHI.B	BCC0
	BLE.B	BCC0
	BLS.B	BCC0
	BLT.B	BCC0
	BMI.B	BCC0
	BNE.B	BCC0
	BPL.B	BCC0
	BVC.B	BCC0
	BVS.B	BCC0
	BCC.W	TEST1
	BCS.W	TEST1
	BEQ.W	TEST1
	BGE.W	TEST1
	BGT.W	TEST1
	BHI.W	TEST1
	BLE.W	TEST1
	BLS.W	TEST1
	BLT.W	TEST1
	BMI.W	TEST1
	BNE.W	TEST1
	BPL.W	TEST1
	BVC.W	TEST1
	BVS.W	TEST1
	SAVE			; Start(For MC68030)
	CPU	68030
;	BCC.L	LONG0		; Assemble error
;	BCS.L	LONG0		; Assemble error
;	BEQ.L	LONG0		; Assemble error
;	BGE.L	LONG0		; Assemble error
;	BGT.L	LONG0		; Assemble error
;	BHI.L	LONG0		; Assemble error
;	BLE.L	LONG0		; Assemble error
;	BLS.L	LONG0		; Assemble error
;	BLT.L	LONG0		; Assemble error
;	BMI.L	LONG0		; Assemble error
;	BNE.L	LONG0		; Assemble error
;	BPL.L	LONG0		; Assemble error
;	BVC.L	LONG0		; Assemble error
;	BVS.L	LONG0		; Assemble error
	DC.W	$64FF,$0001,$FF5E	; BCC.L
	DC.W	$65FF,$0001,$FF5A	; BCS.L
	DC.W	$67FF,$0001,$FF56	; BEQ.L
	DC.W	$6CFF,$0001,$FF52	; BGE.L
	DC.W	$6EFF,$0001,$FF4E	; BGT.L
	DC.W	$62FF,$0001,$FF4A	; BHI.L
	DC.W	$6FFF,$0001,$FF46	; BLE.L
	DC.W	$63FF,$0001,$FF42	; BLS.L
	DC.W	$6DFF,$0001,$FF3E	; BLT.L
	DC.W	$6BFF,$0001,$FF3A	; BMI.L
	DC.W	$66FF,$0001,$FF36	; BNE.L
	DC.W	$6AFF,$0001,$FF32	; BPL.L
	DC.W	$68FF,$0001,$FF2E	; BVC.L
	DC.W	$69FF,$0001,$FF2A	; BVS.L
	RESTORE			; End(For MC68030)
	;; BCHG
;	BCHG.B	D1,D0		; NG(Destination==Dn)
	BCHG.B	#7,3(A0,D1.W)
	BCHG.L	D1,D0
	BCHG.L	#31,D0
;	BCHG.L	#31,3(A0,D1.W)	; NG(Destination<>Dn)
	;; BCLR
	BCLR.B	#7,3(A0,D1.W)
	BCLR.L	D1,D0
	BCLR.L	#31,D0
	;; BRA
BRA0:	BRA.B	BRA0
	BRA.W	TEST1
	SAVE			; Start(For MC68030)
	CPU	68030
;	BRA.L	LONG0		; Assemble error
	DC.W	$60FF,$0001,$FEB4	; BRA.L
	RESTORE			; End(For MC68030)
	;; BSET
	BSET.B	#7,3(A0,D1.W)
	BSET.L	D1,D0
	BSET.L	#31,D0
	;; BSR
BSR0:	BSR.B	BSR0
	BSR.W	TEST1
	SAVE			; Start(For MC68030)
	CPU	68030
;	BSR.L	LONG0		; Assemble error
	DC.W	$61FF,$0001,$FEB4	; BRA.L
	RESTORE			; End(For MC68030)
	;; BTST
	BTST.B	#7,3(A0,D1.W)
	BTST.L	D1,D0
	BTST.L	#31,D0
	;; CHK
	CHK.W	3(A0,D1.W),D0
	CHK.L	#$10008000,D0
	;; CLR
	CLR.B	D0
	CLR.W	3(A0,D1.W)
	CLR.L	$00018000
	;; CMP
	CMP.B	3(A0,D1.W),D0
	CMP.W	D1,D0
	CMP.L	#10008000,D0
	;; CMPA
	CMPA.W	3(A0,D1.W),A0
	CMPA.L	#10008000,A0
	;; CMPI
	CMPI.B	#$99,3(A0,D1.W)
	CMPI.W	#$9988,D0
	CMPI.L	#10008000,$77778888
	;; CMPM
	CMPM.B	(A0)+,(A1)+
	CMPM.W	(A0)+,(A1)+
	CMPM.L	(A0)+,(A1)+
	;; DBcc
	DBCC.W	D0,TEST1
	DBCS.W	D0,TEST1
	DBEQ.W	D0,TEST1
	DBF.W	D0,TEST1
	DBGE.W	D0,TEST1
	DBGT.W	D0,TEST1
	DBHI.W	D0,TEST1
	DBLE.W	D0,TEST1
	DBLS.W	D0,TEST1
	DBLT.W	D0,TEST1
	DBMI.W	D0,TEST1
	DBNE.W	D0,TEST1
	DBPL.W	D0,TEST1
	DBT.W	D0,TEST1
	DBVC.W	D0,TEST1
	DBVS.W	D0,TEST1
	;; DIVS
	DIVS.W	3(A0,D1.W),D0
	DIVS.W	$10008000,D0
	DIVS.W	#$8000,D0
	;; DIVU
	DIVU.W	3(A0,D1.W),D0
	DIVU.W	$10008000,D0
	DIVU.W	#$8000,D0
	;; EOR
	EOR.B	D0,3(A0,D1.W)
	EOR.W	D0,D1
	EOR.L	D0,$10008000
	;; EORI
	EORI.B	#$99,3(A0,D1.W)
	EORI.W	#$9988,D0
	EORI.L	#10008000,$77778888
	;; EORI to CCR
	EORI.B	#$33,CCR
	;; EORI to SR
	EORI.W	#$3366,SR
	;; EXG
	EXG.L	D0,D1
	EXG.L	A0,A1
	EXG.L	D0,A0
	EXG.L	A0,D0
	;; EXT
	EXT.W	D0
	EXT.L	D0
	;; ILLEGAL
	ILLEGAL
	;; JMP
	JMP	3(A0,D1.W)
	JMP	LONG0
	;; JSR
	JSR	3(A0,D1.W)
	JSR	LONG0
	;; LEA
	LEA.L	3(A0,D1.W),A1
	LEA.L	LONG0,A1
	;; LINK
	LINK.W	A1,#-4
	;; LSL
	LSL.B	D0,D1
	LSL.B	#7,D1
;	LSL.B	3(A0,D1.W)	; NG(Destination==Memory)
;	LSL.B	$00018000	; NG(Destination==Memory)
	LSL.W	D0,D1
	LSL.W	#7,D1
	LSL.W	3(A0,D1.W)
	LSL.W	$00018000
	LSL.L	D0,D1
	LSL.L	#7,D1
;	LSL.L	3(A0,D1.W)	; NG(Destination==Memory)
;	LSL.L	$00018000	; NG(Destination==Memory)
	;; LSR
	LSR.B	D0,D1
	LSR.B	#7,D1
	LSR.W	D0,D1
	LSR.W	#7,D1
	LSR.W	3(A0,D1.W)
	LSR.W	$00018000
	LSR.L	D0,D1
	LSR.L	#7,D1
	;; MOVE
MOVE0:	MOVE.B	D1,D0
	MOVE.B	3(A0,D1.W),D0
	MOVE.B	$10008000,D0
	MOVE.B	D0,3(A0,D1.W)
	MOVE.B	D0,$10008000
	MOVE.W	A0,D0
	MOVE.W	3(A0,D1.W),D0
	MOVE.W	$10008000,D0
	MOVE.W	A0,3(A0,D1.W)
	MOVE.W	A0,$10008000
	MOVE.L	A0,D0
	MOVE.L	3(A0,D1.W),D0
	MOVE.L	$10008000,D0
	MOVE.L	A0,3(A0,D1.W)
	MOVE.L	A0,$10008000
	MOVE.L	MOVE0(PC),D0
	MOVE.L	MOVE0(PC,D1.W),D0
	;; MOVE from USP
	MOVE.L	USP,A0
	;; MOVE to,USP
	MOVE.L	A0,USP
	;; MOVEA
	MOVEA.L	D0,A0
	MOVEA.L	3(A0,D1.W),A0
	MOVEA.L	$10008000,A0
	;; MOVEC
	SAVE
	CPU	68030
	MOVEC.L	SFC,D0
	MOVEC.L	D0,SFC
	MOVEC.L	DFC,D0
	MOVEC.L	D0,DFC
	MOVEC.L	CACR,D0
	MOVEC.L	D0,CACR
	MOVEC.L	USP,D0
	MOVEC.L	D0,USP
	MOVEC.L	VBR,D0
	MOVEC.L	D0,VBR
	MOVEC.L	CAAR,D0
	MOVEC.L	D0,CAAR
	MOVEC.L	MSP,D0
	MOVEC.L	D0,MSP
	MOVEC.L	ISP,D0
	MOVEC.L	D0,ISP
	RESTORE
	;; MOVEM
	MOVEM.W	D0-D7/A0-A7,(A0)
	MOVEM.W	D0-D7/A0-A7,3(A0,D1.W)
	MOVEM.W	D0-D7/A0-A7,$10008000
	MOVEM.L	D0-D7/A0-A7,(A0)
	MOVEM.L	D0-D7/A0-A7,3(A0,D1.W)
	MOVEM.L	D0-D7/A0-A7,$10008000
	MOVEM.W	(A0),D0-D7/A0-A7
	MOVEM.W	3(A0,D1.W),D0-D7/A0-A7
	MOVEM.W	$10008000,D0-D7/A0-A7
	MOVEM.L	(A0),D0-D7/A0-A7
	MOVEM.L	3(A0,D1.W),D0-D7/A0-A7
	MOVEM.L	$10008000,D0-D7/A0-A7
	;; MOVEP
	MOVEP.W	D0,3(A0)
	MOVEP.W	3(A0),D0
	MOVEP.L	D0,3(A0)
	MOVEP.L	3(A0),D0
	;; MOVEQ
	MOVEQ.L	#$7F,D1
	;; MULS
	MULS.W	3(A0,D1.W),D0
	MULS.W	$10008000,D0
	MULS.W	#$8000,D0
	;; MULU
	MULU.W	3(A0,D1.W),D0
	MULU.W	$10008000,D0
	MULU.W	#$8000,D0
	;; NBCD
	NBCD.B	D0
	NBCD.B	3(A0,D1.W)
	NBCD.B	$10008000
	;; NEG
	NEG.B	D0
	NEG.W	3(A0,D1.W)
	NEG.L	$10008000
	;; NEGX
	NEGX.B	D0
	NEGX.W	3(A0,D1.W)
	NEGX.L	$10008000
	;; NOP
	NOP
	;; NOT
	NOT.B	D0
	NOT.W	3(A0,D1.W)
	NOT.L	$10008000
	;; OR
	OR.B	3(A0,D1.W),D0
	OR.W	D0,3(A0,D1.W)
	OR.L	#$8000,D0
	;; ORI
	ORI.B	#$33,D0
	ORI.W	#$4444,3(A0,D1.W)
	ORI.L	#$55555555,$00008100
	;; ORI to CCR
	ORI.B	#$88,CCR
	;; ORI from SR
	ORI.W	#$8888,SR
	;; PEA
PEA0:	PEA.L	(A0)
	PEA.L	3(A0,D1.W)
	PEA.L	$4444
	PEA.L	PEA0(PC)
	;; RESET
	RESET
	;; ROL
	ROL.B	D0,D1
	ROL.B	#7,D1
	ROL.W	D0,D1
	ROL.W	#7,D1
	ROL.W	3(A0,D1.W)
	ROL.W	$00018000
	ROL.L	D0,D1
	ROL.L	#7,D1
	;; ROR
	ROR.B	D0,D1
	ROR.B	#7,D1
	ROR.W	D0,D1
	ROR.W	#7,D1
	ROR.W	3(A0,D1.W)
	ROR.W	$00018000
	ROR.L	D0,D1
	ROR.L	#7,D1
	;; ROXL
	ROXL.B	D0,D1
	ROXL.B	#7,D1
	ROXL.W	D0,D1
	ROXL.W	#7,D1
	ROXL.W	3(A0,D1.W)
	ROXL.W	$00018000
	ROXL.L	D0,D1
	ROXL.L	#7,D1
	;; ROXR
	ROXR.B	D0,D1
	ROXR.B	#7,D1
	ROXR.W	D0,D1
	ROXR.W	#7,D1
	ROXR.W	3(A0,D1.W)
	ROXR.W	$00018000
	ROXR.L	D0,D1
	ROXR.L	#7,D1
	;; RTE
	RTE
	;; RTR
	RTR
	;; RTS
	RTS
	;; SBCD
	SBCD.B	D0,D1
	SBCD.B	-(A1),-(A0)
	;; Scc
	SCC.B	D0
	SCS.B	(A0)
	SEQ.B	-(A0)
	SF.B	(A0)+
	SGE.B	3(A0)
	SGT.B	3(A0,D0.W)
	SHI.B	$3333
	SLE.B	$88889999
	SLS.B	D0
	SLT.B	(A0)
	SMI.B	-(A0)
	SNE.B	(A0)+
	SPL.B	3(A0)
	ST.B	3(A0,D0.W)
	SVC.B	$3333
	SVS.B	$88889999
	;; STOP
	STOP	#$9999
	;; SUB
	SUB.B	3(A0),D0
	SUB.W	D0,3(A0)
	SUB.L	#$8000,D0
	;; SUBA
	SUBA.W	3(A0),A0
	SUBA.L	$8002,A0
	;; SUBI
	SUBI.B	#$33,D0
	SUBI.W	#$4444,3(A0)
	SUBI.L	#$55555555,$00008100
	;; SUBQ
	SUBQ.B	#1,D0
	SUBQ.W	#7,3(A0)
	SUBQ.L	#8,$00008100
	;; SUBX
	SUBX.B	D0,D1
	SUBX.W	-(A0),-(A1)
	SUBX.L	D0,D1
	;; SWAP
;	SWAP.W	D0		; NG???(Size=W)
	SWAP.L	D0		; ???
	;; TAS
	TAS.B	D0
	TAS.B	3(A0,D1.W)
	TAS.B	$88889999
	;; TRAP #<vector>
	TRAP	#0
	TRAP	#15
	;; TRAPV
	TRAPV
	;; TST
	TST.B	D0
	TST.B	3(A0,D1.W)
	TST.B	$18889999
	TST.W	D0
	TST.W	3(A0,D1.W)
	TST.W	$18884444
	TST.L	D0
	TST.L	3(A0,D1.W)
	TST.L	$18884444
	;; ULINK An
	UNLK	A1

	ORG	$10008000

LONG0:	DS.L	1

	END
